import { frequency } from './frequency'
import { UserModel, User } from '../models/User'
import { DocumentType } from '@typegoose/typegoose'
import { bot } from './bot'
import { Context, Markup, Extra } from 'telegraf'

const CronJob = require('cron').CronJob

export async function matchmake() {
  // Get and filter users
  const users = (await UserModel.find({ password: { $exists: true } })).filter(
    (u) => !!u.password
  )
  // Get passwords to list of users
  const passwordsToUsers = {} as { [index: string]: DocumentType<User>[] }
  users.forEach((u) => {
    if (passwordsToUsers[u.password]) {
      passwordsToUsers[u.password].push(u)
    } else {
      passwordsToUsers[u.password] = [u]
    }
  })
  // Do the matchmaking
  const pairs = [] as Array<Array<DocumentType<User>>>
  for (const password in passwordsToUsers) {
    // Get users
    const users = passwordsToUsers[password]
    // Make pairs
    while (users.length > 0) {
      // Just one user
      if (users.length < 2) {
        pairs.push([users[0]])
        users.splice(0, 1)
        continue
      }
      // First user
      const firstUser = users.splice(0, 1)[0]
      // Random second user
      const secondUser = users.splice(
        Math.floor(Math.random() * (users.length - 1)),
        1
      )[0]
      // Add pair
      pairs.push([firstUser, secondUser])
    }
  }
  console.log(pairs.map((p) => p.map((u) => `${u.id} ${u.password}`)))
  // Send messages
  for (const pair of pairs) {
    // Just one user
    if (pair.length < 2) {
      const user = pair[0]
      bot.telegram.sendMessage(
        user.id,
        `–ü–æ—Ö–æ–∂–µ, –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –≤—ã –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –ø–∞—Ä—ã! –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤–∞–º, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –ø–æ–≤–µ–∑–µ—Ç –±–æ–ª—å—à–µ, –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ —Å –ø–∞—Ä–æ–ª–µ–º ${user.password} –±–æ–ª—å—à–µ 1 —É—á–∞—Å—Ç–Ω–∏–∫–∞. –õ–∏–±–æ –∏—Ö –º–µ–Ω—å—à–µ 1, –ª–∏–±–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—á–µ—Ç–Ω–æ–µ.

–í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∑–æ–≤–∏—Ç–µ –±–æ–ª—å—à–µ –ª—é–¥–µ–π –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /network ${user.password}, —á—Ç–æ–±—ã —Ç–∞–∫–æ–≥–æ –±–æ–ª—å—à–µ –Ω–µ –±—ã–ª–æ! –í–º–µ—Å—Ç–µ –≤–µ—Å–µ–ª–µ–µ!`,
        {
          parse_mode: 'HTML',
        }
      )
    } else {
      const firstUser = pair[0]
      const secondUser = pair[1]
      await bot.telegram.sendMessage(
        firstUser.id,
        `–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, <a href="tg://user?id=${secondUser.id}">–Ω–∞–∂–∞–≤ –≤–æ—Ç –∑–¥–µ—Å—å</a>. –°–ø–∏—à–∏—Ç–µ—Å—å —Å —ç—Ç–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º, –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è ‚Äî –∏ —Å–æ–∑–≤–æ–Ω–∏—Ç–µ—Å—å —Å –Ω–∏–º –∏–ª–∏ –Ω–µ–π!
        
–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞—à–µ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç. –°–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${frequency} –¥–Ω—è. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ —Å –ø–∞—Ä–æ–ª–µ–º ${firstUser.password}!`,
        {
          parse_mode: 'HTML',
        }
      )
      await bot.telegram.sendMessage(
        firstUser.id,
        `<a href="tg://user?id=${secondUser.id}">–°–æ–±–µ—Å–µ–¥–Ω–∏–∫</a> –≤–∞–º –æ—Ç–≤–µ—Ç–∏–ª?`,
        Extra.markdown()
          .HTML(true)
          .markup(
            Markup.inlineKeyboard([
              Markup.callbackButton('–û—Ç–≤–µ—Ç–∏–ª üëç', `y~${secondUser.id}`),
              Markup.callbackButton('–ù–µ –æ—Ç–≤–µ—Ç–∏–ª üëé', `n~${secondUser.id}`),
            ])
          )
      )
      bot.telegram.sendMessage(
        secondUser.id,
        `–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, <a href="tg://user?id=${firstUser.id}">–Ω–∞–∂–∞–≤ –≤–æ—Ç –∑–¥–µ—Å—å</a>. –°–ø–∏—à–∏—Ç–µ—Å—å —Å —ç—Ç–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º, –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è ‚Äî –∏ —Å–æ–∑–≤–æ–Ω–∏—Ç–µ—Å—å —Å –Ω–∏–º –∏–ª–∏ –Ω–µ–π!

–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞—à–µ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç. –°–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${frequency} –¥–Ω—è. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ —Å –ø–∞—Ä–æ–ª–µ–º ${secondUser.password}`,
        {
          parse_mode: 'HTML',
        }
      )
      await bot.telegram.sendMessage(
        secondUser.id,
        `<a href="tg://user?id=${firstUser.id}">–°–æ–±–µ—Å–µ–¥–Ω–∏–∫</a> –≤–∞–º –æ—Ç–≤–µ—Ç–∏–ª?`,
        Extra.markdown()
          .HTML(true)
          .markup(
            Markup.inlineKeyboard([
              Markup.callbackButton('–û—Ç–≤–µ—Ç–∏–ª üëç', `y~${firstUser.id}`),
              Markup.callbackButton('–ù–µ –æ—Ç–≤–µ—Ç–∏–ª üëé', `n~${firstUser.id}`),
            ])
          )
      )
    }
  }
}

const job = new CronJob(`0 0 */${frequency} * *`, () => {
  matchmake()
})
job.start()

export async function actionCallback(ctx: Context) {
  await ctx.deleteMessage()
  await ctx.answerCbQuery()
  const components = ctx.callbackQuery.data.split('~')
  const responded = components[0] === 'y'
  if (responded) {
    return
  }
  const user = await UserModel.findOne({ id: +components[1] })
  if (!user) {
    return
  }
  user.notRespondedTimes++
  await user.save()
  if (user.notRespondedTimes > 2) {
    user.password = undefined
    await user.save()
    await bot.telegram.sendMessage(
      user.id,
      '–ü–æ—Ö–æ–∂–µ, –≤—ã —É–∂–µ –≤ —Ç—Ä–µ—Ç–∏–π —Ä–∞–∑ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É. –ü–æ—ç—Ç–æ–º—É –º—ã –≤—ã–∫–ª—é—á–∏–ª–∏ –≤–∞–º –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ ‚Äî –≤–∫–ª—é—á–∏—Ç–µ —Å–Ω–æ–≤–∞. –£–¥–∞—á–∏!'
    )
  }
}
